{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Release Validation for SREs with Site Reliability Guardian","text":"<p>In this demo, you take on the role of a Site Reliability Engineer (SRE). You are running an application, consisting of a number of microservices.</p> <p>The application is already instrumented to emit tracing data, using the OpenTelemetry standard. The demo system will be automatically configured to transport that data to Dynatrace for storage and processing.</p> <p>Your job is to:</p> <ul> <li>Ensure each service in the application is healthy.</li> <li>Ensure that any new release of a microservice does not negatively impact the application.</li> </ul> <p>To achieve these objectives, you will:</p> <ul> <li>Create a Site Reliability Guardian to test and ensure the health of your microservices (starting with the most user impacting service - the <code>checkoutservice</code>)</li> <li>Use the auto baselining capability of Dynatrace to suggest (and dynamically adjust) thresholds based on current and past performance.</li> </ul>"},{"location":"#a-new-release","title":"A New Release","text":"<p>Your company utilises feature flags to enable new features. A product manager informs you that they wish to release a new feature.</p> <p>It is your job to:</p> <ul> <li>Enable that feature flag in a development environment.</li> <li>Judge the impact (if any) of that change on the application.</li> <li>If an impact is observed, gather the evidence and then disable the feature flag.</li> <li>Make the \"go / no go\" decision for that feature.</li> <li>Provide feedback to the product managers on why you made the decision you did.</li> </ul>"},{"location":"#compatibility","title":"Compatibility","text":"Deployment Tutorial Compatible Dynatrace Managed \u274c Dynatrace SaaS \u2714\ufe0f"},{"location":"#click-here-to-begin","title":"Click Here to Begin...","text":""},{"location":"automate-srg/","title":"Automate the Site Reliability Guardian","text":"<p>Site reliability guardians can be automated so they happen whenever you prefer (on demand / on schedule / event based). A Dynatrace workflow is used to achieve this.</p> <p>In this demo:</p> <ul> <li>A load test will run and send a \"load test finished\" Software Delivery Lifecycle event into Dynatrace (see below).</li> <li>A Dynatrace workflow will react to that event and trigger a guardian.</li> </ul> <p>Let's plumb that together now.</p>"},{"location":"automate-srg/#sample-k6-teardown-test-finished-event","title":"Sample k6 teardown test finished event","text":"<p>This is already coded into the demo load test script.</p> <pre><code>export function teardown() {\n    let post_params = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Api-Token ${__ENV.K6_DYNATRACE_APITOKEN}`\n      },\n    };\n\n    let test_duration = 2m;\n\n    // Send SDLC event at the end of the test\n    let payload = {\n      \"event.provider\": \"k6\",\n      \"event.type\": \"test\",\n      \"event.category\": \"finished\",\n      \"service\": \"checkoutservice\",\n      \"duration\": test_duration\n    }\n    let res = http.post(`${__ENV.K6_DYNATRACE_URL}/platform/ingest/v1/events.sdlc`, JSON.stringify(payload), post_params);\n}\n</code></pre>"},{"location":"automate-srg/#create-a-workflow-to-trigger-guardian","title":"Create a Workflow to Trigger Guardian","text":"<p>Ensure you are still on the <code>Three golden signals (checkoutservice)</code> screen.</p> <ul> <li>Click the <code>Automate</code> button. This will create a template workflow.</li> <li>Change the <code>event type</code> from <code>bizevents</code> to <code>events</code>.</li> <li>Change the <code>Filter query</code> to:</li> </ul> <pre><code>event.type == \"test\"\nAND event.category == \"finished\"\nAND service == \"checkoutservice\"\n</code></pre> <ul> <li>Click the <code>run_validation</code> node.</li> <li>Remove <code>event.timeframe.from</code> and replace with:</li> </ul> <pre><code>now-{{ event()['duration'] }}\n</code></pre> <p>The UI will change this to <code>now-event.duration</code>.</p> <ul> <li>Remove <code>event.timeframe.to</code> and replace with:</li> </ul> <pre><code>now\n</code></pre> <ul> <li>Click the <code>Save</code> button.</li> </ul> <p>The workflow is now created and connected to the guardian. It will be triggered whenever the platform receives an event like below.</p> <p> </p> <p>The workflow is now live and listening for events.</p>"},{"location":"automate-srg/#click-here-to-continue","title":"Click Here to Continue...","text":""},{"location":"cleanup/","title":"Cleanup","text":"<p>Go to https://github.com/codespaces and delete the codespace which will delete the demo environment.</p>"},{"location":"create-srg/","title":"Create Site Reliability Guardian","text":"<p>Site reliability guardians are a mechanism to automate analysis when changes are made. They can be used in production (on a CRON) or as deployment checks (eg. pre and post deployment health checks, security checks, infrastructure health checks).</p> <p>We will create a guardian to check the <code>checkoutservice</code> microservice which is used during the purchase journey.</p> <ul> <li>Press <code>ctrl + k</code> search for <code>Site Reliability Guardian</code> and select the app.</li> <li>Click <code>+ Guardian</code> to add a new guardian.</li> <li>Under <code>Four Golden Signals</code> choose <code>Use template</code>.</li> <li>Click <code>Run query</code> and toggle <code>50</code> rows per page to see more services.</li> <li>Select the <code>checkoutservice</code>. Click <code>Apply to template (1)</code>.</li> <li>Hover over the <code>Saturation</code> objective and delete it (there are no resource statistics from OpenTelemetry available so this objective cannot be evaluated).</li> <li>At the top right of the screen, customise the guardian name to be called <code>Three golden signals (checkoutservice)</code>.</li> <li>Click <code>Save</code></li> </ul> <p> </p> <p>Note: This process can be automated for at-scale usage using Monaco or Terraform.</p> <pre><code>## TODO: Need secondary tutorial on this? Link to it for each...\n</code></pre>"},{"location":"create-srg/#click-here-to-continue","title":"Click Here to Continue...","text":""},{"location":"enable-auto-baselines/","title":"Enable Automatic Baselining for Site Reliability Guardian","text":"<p>Objectives that are set to \"auto baseline\" in Dynatrace Site Reliability Guardians require <code>5</code> runs in order to enable the baselines.</p> <p>In a real scenario, these test runs would likely be spread over hours, days or weeks. This provides Dynatrace with ample time to gather sufficient usage data.</p> <p>For demo purposes, 5 seperate \"load tests\" will be triggered in quick succession to enable the baselining.</p> <p>First, open a new terminal window and apply the load test script:</p> <pre><code>kubectl apply -f .devcontainer/k6/k6-load-test-script.yaml\n</code></pre>"},{"location":"enable-auto-baselines/#trigger-the-first-load-test","title":"Trigger the First Load Test","text":"<pre><code>kubectl apply -f .devcontainer/k6/k6-srg-training-run1.yaml\n</code></pre>"},{"location":"enable-auto-baselines/#trigger-the-second-load-test","title":"Trigger the Second Load Test","text":"<p>Wait a few seconds and trigger the second load test:</p> <pre><code>kubectl apply -f .devcontainer/k6/k6-srg-training-run2.yaml\n</code></pre>"},{"location":"enable-auto-baselines/#trigger-the-third-load-test","title":"Trigger the Third Load Test","text":"<p>Wait a few seconds and trigger the third load test:</p> <pre><code>kubectl apply -f .devcontainer/k6/k6-srg-training-run3.yaml\n</code></pre>"},{"location":"enable-auto-baselines/#trigger-the-fourth-load-test","title":"Trigger the Fourth Load Test","text":"<p>Wait a few seconds and trigger the fourth load test:</p> <pre><code>kubectl apply -f .devcontainer/k6/k6-srg-training-run4.yaml\n</code></pre>"},{"location":"enable-auto-baselines/#trigger-the-final-training-load-test","title":"Trigger the Final Training Load Test","text":"<p>Wait a few seconds and trigger the final (fifth) load test:</p> <pre><code>kubectl apply -f .devcontainer/k6/k6-srg-training-run5.yaml\n</code></pre>"},{"location":"enable-auto-baselines/#wait-for-completion","title":"Wait for Completion","text":"<p>Each load test runs for 1 minute so keep running the following command until you see all jobs listed as <code>Complete</code>:</p> <pre><code>kubectl get jobs\n</code></pre> <pre><code>\u279c /workspaces/obslab-release-validation (main) $ kubectl get jobs\nNAME               STATUS     COMPLETIONS   DURATION   AGE\nk6-training-run1   Complete   1/1           95s        2m2s\nk6-training-run2   Complete   1/1           93s        115s\nk6-training-run3   Complete   1/1           93s        108s\nk6-training-run4   Complete   1/1           90s        100s\nk6-training-run5   Complete   1/1           84s        94s\n</code></pre>"},{"location":"enable-auto-baselines/#view-completed-training-runs","title":"View Completed Training Runs","text":"<p>In Dynatrace, go to <code>workflows</code> and select <code>Executions</code>. You should see 5 successful workflow executions:</p> <p></p>"},{"location":"enable-auto-baselines/#view-srg-status-using-dql","title":"View SRG Status using DQL","text":"<p>You can also use this DQL to see the Site Reliability Guardian results in a notebook:</p> <pre><code>fetch bizevents\n| filter event.provider == \"dynatrace.site.reliability.guardian\"\n| filter event.type == \"guardian.validation.finished\"\n| fieldsKeep guardian.id, validation.id, timestamp, guardian.name, validation.status, validation.summary, validation.from, validation.to\n</code></pre> <p></p>"},{"location":"enable-auto-baselines/#view-srg-status-in-the-site-reliability-guardian-app","title":"View SRG Status in the Site Reliability Guardian App","text":"<p>The SRG results are also available in the Site Reliabiltiy Guardian app:</p> <ul> <li>Press <code>ctrl + k</code></li> <li>Search for <code>site reliability guardian</code> or <code>srg</code></li> <li>Open the app and click <code>Open</code> on your guardian</li> </ul> <p>You should see the <code>5</code> runs listed:</p> <p></p>"},{"location":"enable-auto-baselines/#training-complete","title":"Training Complete","text":"<p>The automatic baselines for the guardian are now enabled.</p> <p>You can proceed to use the guardian for \"real\" evaluations.</p>"},{"location":"enable-auto-baselines/#click-here-to-continue","title":"Click Here to Continue...","text":""},{"location":"enable-change/","title":"8. Make a Change","text":"<p>A product manager informs you that they're ready to release their new feature. They ask you to enable the feature and run the load test in a dev environment.</p> <p>They tell you that the new feature is behind a flag called <code>paymentServiceFailure</code> (yes, an obvious name for this demo) and they tell you to change the <code>defaultValue</code> from <code>off</code> to <code>on</code>.</p>"},{"location":"enable-change/#update-the-feature-flag-and-inform-dynatrce","title":"Update the Feature Flag and Inform Dynatrce","text":"<p>Run the following script which:</p> <ul> <li>Notifies Dynatrace using a <code>CUSTOM_INFO</code> event of the change inc. the new value</li> <li>Changes the <code>defaultValue</code> of the <code>paymentServiceFailure</code> feature flag to <code>on</code></li> <li>Applies the configuration change</li> </ul> <pre><code>./runtimeChange.sh paymentServiceFailure on\n</code></pre>"},{"location":"enable-change/#run-acceptance-load-test","title":"Run Acceptance Load Test","text":"<p>It is time to run an acceptance load test to see if the new feature has caused a regression.</p> <p>This load test will run for 3 minutes and then trigger the site reliability guardian again:</p> <pre><code>kubectl apply -f .devcontainer/k6/k6-after-change.yaml\n</code></pre>"},{"location":"enable-change/#configuration-change-events","title":"Configuration Change Events","text":"<p>While you are waiting for the load test to complete, it is worth noting that each time a feature flag is changed, the <code>runtimeChange.sh</code> shell script sends an event to the service that is affected.</p> <p>The feature flag changes the behaviour of the <code>paymentservice</code> (which the <code>checkoutservice</code> depends on).</p> <p>Look at the <code>paymentservice</code> and notice the configuration changed events noted.</p> <p>Dynatrace AI uses these events as part of the root cause analysis engine.</p> <p>You can send event for anything you like: deployments, load tests, security scans, configuration changes and more.</p> <p></p>"},{"location":"enable-change/#click-here-to-continue","title":"Click Here to Continue...","text":""},{"location":"getting-started/","title":"Getting Started","text":"<p>You must have the following to use this hands on demo.</p> <ul> <li>A Dynatrace environment (sign up here)</li> <li>A Dynatrace API token (see below)</li> </ul> <p>Save the Dynatrace environment URL without the trailing slash and without the <code>.apps.</code> in the URL:</p> <pre><code>https://abc12345.live.dynatrace.com\n</code></pre>"},{"location":"getting-started/#create-api-token","title":"Create API Token","text":"<p>In Dynatrace:</p> <ul> <li>Press <code>ctrl + k</code>. Search for <code>access tokens</code>.</li> <li>Create a new access token with the following permissions:<ul> <li><code>metrics.ingest</code></li> <li><code>logs.ingest</code></li> <li><code>events.ingest</code></li> <li><code>openTelemetryTrace.ingest</code></li> <li><code>openpipeline.events_sdlc</code></li> </ul> </li> </ul>"},{"location":"getting-started/#start-demo","title":"Start Demo","text":"<p>Click this button to open the demo environment. This will open in a new tab.</p> <p></p>"},{"location":"getting-started/#click-here-to-continue","title":"Click Here to Continue...","text":""},{"location":"resources/","title":"Resources","text":"<ul> <li>This repository and documentation on GitHub</li> </ul>"},{"location":"run-production-srg/","title":"7. Run a Production SRG","text":"<p>The preparation phase is now complete. Everything before now is a one-off task.</p> <p>In day-to-day operations, you would begin from here.</p>"},{"location":"run-production-srg/#run-an-evaluation","title":"Run an Evaluation","text":"<p>Now that the Site Reliability Guardian is trained, run another evaluation by triggering a load test.</p> <p>Remember, the workflow is currently configured to listen for <code>test finished</code> events but you could easily create additional workflows with different triggers such as on-demand on time-based CRON triggers.</p> <p>Run another load test to trigger a sixth evaluation.</p> <pre><code>kubectl apply -f .devcontainer/k6/k6.yaml\n</code></pre> <p>After about 90 seconds, <code>kubectl get jobs</code> should show:</p> <pre><code>\u279c /workspaces/obslab-release-validation (main) $ kubectl get jobs\nNAME               STATUS     COMPLETIONS   DURATION   AGE\nk6-training-run1   Complete   1/1           102s       9m41s\nk6-training-run2   Complete   1/1           100s       9m33s\nk6-training-run3   Complete   1/1           101s       9m23s\nk6-training-run4   Complete   1/1           93s        9m17s\nk6-training-run5   Complete   1/1           91s        9m11s\nrun-k6             Complete   1/1           79s        81s\n\n</code></pre> <p>When this evaluation is completed, click the <code>Refresh</code> button in the <code>Validation history</code> panel of the site reliability guardian app (when viewing an individual guardian) and the heatmap should look like the image below</p> <p>Note: Your results may vary.</p> <p>In this example below, the <code>Traffic</code> objective failed because the auto-adaptive thresholds detected that a traffic level below <code>1171</code> requests is too low and the actual traffic level was <code>1158</code>. Because one objective failed, the guardian failed.</p> <p>5 training runs and 1 \"real\" run:</p> <p></p> <p></p>"},{"location":"run-production-srg/#setting-objectives-to-informational-only","title":"Setting Objectives to Informational Only","text":"<p>It is possible to add objectives that are \"informational only\" and do not contribute to the pass / fail decisions.</p> <p>This is useful for new services where you are trying to \"get a feel for\" the real-world data values of your metrics.</p> <p>To set an objective as \"information only\":</p> <ul> <li>Select the objective to open the side panel</li> <li>Scroll down to <code>Define thresholds</code></li> <li>Select the <code>No thresholds</code> option</li> </ul> <p></p>"},{"location":"run-production-srg/#click-here-to-continue","title":"Click Here to Continue...","text":""},{"location":"validate-telemetry/","title":"Start The Demo","text":"<p>After the codespaces has started, the post creation script should begin. This will install everything and will take a few moments.</p> <p>When the script has completed, a success message will briefly be displayed (it is so quick you'll probably miss it) and an empty terminal window will be shown.</p> <p></p> <p></p>"},{"location":"validate-telemetry/#wait-for-demo-to-start","title":"Wait For Demo to Start","text":"<p>Wait for the demo application pods to start:</p> <pre><code>kubectl -n default wait --for=condition=Ready --all --timeout 300s pod\n</code></pre>"},{"location":"validate-telemetry/#access-demo-user-interface","title":"Access Demo User Interface","text":"<p>Start port forwarding to access the user interface:</p> <pre><code>kubectl -n default port-forward svc/my-otel-demo-frontendproxy 8080\n</code></pre> <p>Leave this command running. Open a new terminal window to run any other commands.</p> <p>Go to ports tab, right click the <code>demo app</code> entry and choose <code>Open in browser</code>.</p> <p></p> <p>You should see the OpenTelemetry demo:</p> <p></p>"},{"location":"validate-telemetry/#validate-telemetry","title":"Validate Telemetry","text":"<p>It is time to ensure telemetry is flowing correctly into Dynatrace.</p> <p>In Dynatrace, follow these steps:</p>"},{"location":"validate-telemetry/#validate-services","title":"Validate Services","text":"<ul> <li>Press <code>ctrl + k</code>. Search for <code>services</code>. Go to services screen and validate you can see services.</li> <li>Open a service and validate that the URL contains <code>SERVICE-****</code>.<ul> <li>If the URL contains <code>CUSTOM_DEVICE-****</code>:<ul> <li>Press <code>ctrl + k</code> and search for <code>settings</code>.</li> <li>Go to <code>Service Detection &gt; Unified services for OpenTelemetry</code> and ensure the toggle is on.</li> </ul> </li> </ul> </li> </ul>"},{"location":"validate-telemetry/#validate-traces","title":"Validate Traces","text":"<ul> <li>Press <code>ctrl + k</code>. Search for <code>distributed traces</code>.</li> <li>Go to distributed traces and validate data is flowing.</li> </ul>"},{"location":"validate-telemetry/#validate-metrics","title":"Validate Metrics","text":"<ul> <li>Press <code>ctrl + k</code>. Search for <code>metrics</code>.</li> <li>Go to metrics and search for <code>app.</code> and validate you can see some metrics.</li> </ul>"},{"location":"validate-telemetry/#validate-logs","title":"Validate Logs","text":"<ul> <li>Press <code>ctrl + k</code>. Search for <code>notebooks</code>.</li> <li>Create a new notebook then click <code>+</code> to add a new <code>DQL</code> section.</li> <li>Use this Dynatrace Query Language. Validate you can see some log lines.</li> </ul> <pre><code>fetch logs, scanLimitGBytes: 1\n| filter contains(content, \"conversion\")\n</code></pre>"},{"location":"validate-telemetry/#telemetry-flowing","title":"Telemetry Flowing?","text":"<p>If these four things are OK, your telemetry is flowing correctly into Dynatrace.</p> <p>If not, please search for similar problems and / or raise an issue here.</p>"},{"location":"validate-telemetry/#click-here-to-continue","title":"Click Here to Continue...","text":""},{"location":"view-acceptance-test-results/","title":"9. View Acceptance Test Results","text":""},{"location":"view-acceptance-test-results/#view-data","title":"View Data","text":"<p>After ~3 minutes, <code>kubectl get jobs</code> should show the <code>acceptance-load-test</code> to be <code>Complete</code>.</p> <p>Refresh the Site Reliability Guardian results heatmap again and you should see that the guardian has failed.</p> <p></p> <p>The guardian has failed due to the error rate being too high.</p> <p></p> <p>Navigating to the <code>checkoutservice</code> (<code>ctrl + k</code> &gt; <code>services</code> &gt; <code>checkoutservice</code>), you can see the increase in failure rate.</p> <p></p> <p>Scroll down the services screen until you see the OpenTelemetry traces list. Notice lots of failed requests:</p> <p></p>"},{"location":"view-acceptance-test-results/#analyse-a-failed-request","title":"Analyse a Failed Request","text":"<p>Drill into one of the failed requests and notice lots of failures.</p> <p>These failures are bubbling up through the request chain back towards the checkoutservice.</p> <p>Ultimately though, the failure comes from the final span in the trace: The call to <code>PaymentService/Charge</code>.</p> <p>Investigating the span events the cause of the failure becomes clear: The payment service cuase an exception. The exception message and stacktrace is given:</p> <pre><code>exception.message   PaymentService Fail Feature Flag Enabled\nexception.stacktrace    Error: PaymentService Fail Feature Flag Enabled at module.exports.charge\n  (/usr/src/app/charge.js:21:11) at process.processTicksAndRejections\n  (node:internal/process/task_queues:95:5) at async Object.chargeServiceHandler\n  [as charge] (/usr/src/app/index.js:21:22)\nexception.type  Error\n</code></pre> <p></p>"},{"location":"view-acceptance-test-results/#roll-back-change","title":"Roll Back Change","text":"<p>Roll back the change:</p> <pre><code>./runtimeChange.sh paymentServiceFailure off\n</code></pre>"},{"location":"view-acceptance-test-results/#summary","title":"Summary","text":"<p>Looking back at the initial brief, it was your job to:</p> <ul> <li>Enable that feature flag in a development environment.</li> <li>Judge the impact (if any) of that change on the application.</li> <li>If an impact is observed, gather the evidence and then disable the feature flag.</li> <li>Make the \"go / no go\" decision for that feature.</li> <li>Provide feedback to the product managers on why you made the decision you did.</li> </ul> <p>So how did things turn out?</p> <ul> <li>You have enabled a feature flag and send contextual event information to Dynatrace.</li> <li>You used OpenTelemetry and Dynatrace to make an evidence-based analysis of the new software quality.</li> <li>You have automated the change analysis, noticing an impact and remediated it.</li> <li>You have protected users by automating this analysis in a development environment (of course, you could repeat this setup in production too).</li> <li>You have made the <code>no go</code> decision based on evidence provided by OpenTelemetry and the Dynatrace Site Reliability Guardian.</li> <li>You can provide this evidence (down to the stacktrace and line of code) back to the product manager so they can prioritise fixes.</li> </ul> <p>The Dynatrace Platform, Site Reliability Guardian and Workflows have provided visibility and automated change analysis.</p>"},{"location":"view-acceptance-test-results/#cleanup-resources","title":"Cleanup Resources &gt;&gt;","text":""},{"location":"whats-next/","title":"What's Next?","text":"<p>TODO</p> <p>Content about how the user progresses after this demo...</p>"},{"location":"whats-next/#resources","title":"Resources","text":""}]}